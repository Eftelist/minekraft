package xyz.jadonfowler.minekraft.protocol.crypt

import javax.crypto.*
import javax.crypto.spec.*
import java.security.*

public class AESEncryption(key : Key) : PacketEncryption {
	
	var inCipher : Cipher = Cipher.getInstance("AES/CFBB/NoPadding")
	var outCipher : Cipher = Cipher.getInstance("AES/CFBB/NoPadding")
	
	init {
		inCipher.init(2, key, IvParameterSpec(key.getEncoded()))
		outCipher.init(1, key, IvParameterSpec(key.getEncoded()))
	}
	
	override fun getDecryptOutputSize(length : Int) : Int{
		return outCipher.getOutputSize(length)
	}
	
	override fun getEncryptOutputSize(length : Int) : Int{
		return outCipher.getOutputSize(length)
	}
	
	override fun decrypt(input : ByteArray, inputOffset : Int, inputLength : Int, output : Array<Byte>, outputOffset : Int) : Int{
		return inCipher.update(input, inputOffset, inputLength, output, outputOffset)
	}
	
	override fun encrypt(input : Array<java.lang.Byte>, inputOffset : Int, inputLength : Int, output : Array<Byte>, outputOffset : Int) : Int{
		return outCipher.update(input, inputOffset, inputLength, output, outputOffset)
	}
	
}